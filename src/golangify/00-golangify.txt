Begin:
https://golangify.com/customizing-http-headers

Обработчик - MVC паттерн проектирования, обработчики напоминают контроллеры.
Они отвечают за выполнение логики приложения, а также за заголовок и тело HTTP ответа.

Маршутизатор HTTP запросов (servemux). Хранит связь между URL-шаблонами приложения
и соответствующими обработчиками. В приложении обычно есть один servemux,
который содержит все URL маршруты

Веб-сервер. В Go есть встроенный веб-сервер. Можно прслеживать входящие HTTP
запросы и все это будет частью приложения. Внешний сторонний веб-сервер типа
Nginx или Apache не понадобится.

Сетевой TCP-адрес задается в формате "host:port"
Если не задать host, ":4000", то сервер будет слушать все доступные сетевые
соединения компьютера.
Если сетевых интерфейсов несколько, то нужно указать host. Обычно не нужно.

В некоторых проектах порты указываются как ":http" или ":http-alt" - именованные
порты. Go попытается соответствующий номер в файле /etc/services

Запуск приложения, варианты:
1. $ go run .
2. $ go run main.go
3. $ go run [moduleName]  // Имя заданное командой go mod init moduleName

Servmux (маршутизатор HTTP запросов) в Go поддерживает 2 типа URL-шаблонов
  - фиксированные пути - не заканчиваются '/'
  - многоуровневые пути - заканчиваются '/'

Фиксированные пути:
  "/snippet"
  "/snippet/create"
В Servmux такие шаблоны фикс.пути сопостовляются (и вызывается соотв.обраб-чик)
только тогда, когда путь URL-запроса точно совпадает с фикс.путем

Многоуровневые пути:
  "/**"
  "/static/**"
  "/static"
Шаблоны путей сопоставляются (вызывается соотв.обработчик) всякий раз, когда
начало пути URL-запроса совпадает с путем дерева

Функции http.Handle() и http.HandleFunc() позволяют регистрацию маршрутов
без объявления самого servemux.
Где-то за кулисами эти функции регистирруют свои маршруты с помощью
DefaultServeMux - обычный servemux, но инициализируетя сам по умолчанию и сохраняется
в глобальной переменной, которая в свою очередь хранится в net/http

Код меньше (на строку), но golangify.com не рекомендует использовать DefaultServeMux.
DefaultServeMux - глобальна переменная, любой пакет может получить к ней доступ,
в т.ч. сторонние пакеты, кот.использует ваше приложение. Может быть создан
backdoor для сервера.

Лучше использовать свой servemux с локальной областью видимости.

Особенности servemux:
  - в servemux более длинные проверочные URL-шаблоны, а они обладают приоритетом
    перед короткими
  - URL-пути запросов автоматически очищаютсяются. Если путь запроса содержит
    '.' или '..' или повторяющиеся '/' - пользователь будет автоматически
    перенаправлен на эквивалентный чистый URL. Например на
    запрос '/foo/bar/..//baz' он получит ответ 301 Permanent Redirect и будет
    направлен на '/foo/baz'
  - Если многоуровневый путь зареган и HTTP запрос получен для этого пути без
    слеша в конце('/foo'), то пользователь будет перенаправлен через
    301 Permanent Redirect на многоуровневый '/foo/'
