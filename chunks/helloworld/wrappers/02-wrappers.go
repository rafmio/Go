// The example generated by DeepSeek
package main

import (
	"fmt"
)

// Функция-обертка, которая принимает функцию f и возвращает новую функцию,
// которая вызывает f и добавляет некоторую логику до и после вызова.
func wrapFunction(f func()) func() {
	return func() {
		fmt.Println("Начало выполнения функции")
		f()
		fmt.Println("Завершение выполнения функции")
	}
}

// Функция-обертка, которая принимает функцию f и возвращает новую функцию,
// которая вызывает f с переданными аргументами и возвращает результат.
func wrapFunctionWithArgs(f func(int, int) int) func(int, int) int {
	return func(a, b int) int {
		fmt.Printf("Вызов функции с аргументами: %d, %d\n", a, b)
		result := f(a, b)
		fmt.Printf("Результат функции: %d\n", result)
		return result
	}
}

func main() {
	// Пример использования первой функции-обертки
	wrappedFunc := wrapFunction(func() {
		fmt.Println("Выполнение основной функции")
	})
	wrappedFunc()

	// Пример использования второй функции-обертки
	add := func(a, b int) int {
		return a + b
	}
	wrappedAdd := wrapFunctionWithArgs(add)
	sum := wrappedAdd(3, 4)
	fmt.Println("Сумма:", sum)
}
