http.FileServer - используется для доступа к статическим файлам из определенной
директории по HTTP протоколу.

func FileServer(root FileSystem) Handler  //  FileSystem - interface

Возвращает обработчик, которые обслуживает HTTP запросы с содержимым
файловой системы, внедренной в root (?)
В особых случаях перенаправляет любой запрос, заканчивающийся
на "/index.html" на тот же путь, без окончания "index.html"

http.FileServer - используется для доступа к статическим файлам из определенной
директории по HTTP протоколу.

После запуска веб-приложения, обработчик http.FileServer, возможно, не будет
читать файлы напрямую с жеского диска. ОС Win и Unix кэшируют недавно
исползованные файлы в RAM, поэтому http.FileServer будет доставать их из RAM,
а не выполнять медленную обработку файла с ЖД

Чтобы использовать реализацию файловой системы ОС нужно использовать http.Dir.
type Dir string // ? implements FileSystem interface?

Dir реализует файловую систему, используя собственную файловую систему,
ограниченную определенным деревом каталогов.

type FileSystem interface {
	Open(name string) (File, error)
}

Для удаления части URL используется http.StripPrefix()
func StripPrefix(prefix string, h Handler) Handler
Возвращает обработчик, который обслуживает http-запросы, удаляя
указанный префикс из пути URL-адреса запроса (и RawPath, если задан) и
вызывая обработчик h

-----------------------------------------------
http.HandlerFunc():

type HandlerFunc func(ResponseWriter, *Request)
Это адаптер чтобы позволлить изспользование обычной функции как
http-обработчик. Работает путем автоматического добавления метода ServeHTTP() для
адаптируемой фукции. Это обходной способ заставить обычную функцию
соответствовать требованиям интерфейса http.Handler

-----------------------------------------------
У ServeMux тоже есть метод ServeHTTP(). ServeMux тоже соответствует требованиям
интерфейса http.Handler

Проще думать о ServeMux как об особом обработчике, который вместо предоставления
ответа передает запрос второму обработчику.

Когда сервер получает новый HTTP-запрос, он вызывает метод ServeHTTP() от
ServeMux. Он ищет соответствующий обработчик на основе URL-запроса и, в свою
очередь, вызывает метод ServeHTTP() этого обработчика.

Можно рассматривать веб-приложение как цепочку из ServeHTTP() методов,
вызываемых один за другим.

Все входящие HTTP-запросы выполняются в собственной горутине.
