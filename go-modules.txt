https://go.dev/doc/tutorial/call-module-code
https://golang-blog.blogspot.com/2019/06/go-modules.html
Периодически терминал "забывает" путь к Go, нужно напоминать:
export PATH=$PATH:/usr/local/go/bin
----------------------------------------------------------
go mod init moduleName

In main module:
$ go mod edit -replace example.com/greetings=../greetings

$ go mod tidy
----------------------------------------------------------
I can't export struct from module (functions and variables
exported successfully)
----------------------------------------------------------
Чтобы включить отслеживание зависимостей для кода нужно
- создать файл go.mod
- запустить команду go mod init
- указать название модуля (например example/init), в котором будет код
(создастся файл go.mod с текстом module example/hello + go <номер версии>)

Путь к модулю обычно является местоположение хранилища (repository),
в котором будет храниться код
Например, путь к модулю может быть github.com/mymodule

Вызов кода во внешнем пакете
Для примера
- идем на сайт pkg.go.dev и ищем пакет "quote"
- находим пакет rsc.io/quote
- в секции Documentation под Index находим список функций, которые мы можем
  вызвать из нашего кода. Будем использовать функцию Go

В нашем коде импортируем пакет rsc.io/quote и добавляем вызов к функции Go

В Go код группируется в пакеты, а пакеты группируются в модули
Модуль определяет зависимости, необходимые для запуска кода, включая версию Go
и набор других требуемых модулей


Периодически терминал "забывает" путь к Go, нужно напоминать:
export PATH=$PATH:/usr/local/go/bin

Для прикладного применения вы бы опубликовали example.com/greetings из своего
репозитория, где Go tools соможет найти его для загрузки. Поскольку мы еще не
опубликовали модуль, нам нужно адаптировать example.com/hello чтобы он смог
найти модуль example.com/greetings в нашей локальной системе

Для этого используйте команду go mod edit для редактирования example.com/hello
модуль для перенаправления Go tools с пути к модулю (где модуля нет)
в локальный каталог (где он есть).

Из папки hello:
$ go mod edit -replace example.com/greetings=../greetings
В данном случае второй greetings - это название папки, где лежит одноименный
модуль

В папке hello в файле go.mod появится строка
replace example.com/greetings => ../greetings

Чтобы синхронизировать зависимости модуля example.com/hello нужно запустить
команду go mod tidy добавляя те,которые требуются кодом, но еще
 не отслеживаются в модуле.

 $ go mod tidy
 go: found example.com/greetings in example.com/greetings v0.0.0-00010101000000-000000000000

Команда нашла локальный код в каталоге greetings, затем добавила директиву
require, чтобы указать, что example.com/hello требует example.com/greetings

Вы создали эту зависимость, когда импортировали пакет приветствий в hello.go
