// Generated by Preplexity
package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

// Worker function that simulates a task
func worker(id int, wg *sync.WaitGroup, ch chan<- string) {
	defer wg.Done()
	sleepTime := rand.Intn(3)
	time.Sleep(time.Duration(sleepTime) * time.Second)
	result := fmt.Sprintf("Worker %d finished after %d seconds", id, sleepTime)
	ch <- result
}

func main() {
	var wg sync.WaitGroup
	ch := make(chan string, 3) // buffered channel

	// start 3 worker goroutines
	for i := 1; i <= 3; i++ {
		wg.Add(1)
		go worker(i, &wg, ch)
	}

	go func() {
		wg.Wait()
		close(ch)
	}()

	for result := range ch {
		fmt.Println(result)
	}

	fmt.Println("All workers completed")
}
