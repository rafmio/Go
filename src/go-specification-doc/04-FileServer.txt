http.FileServer - используется для доступа к статическим файлам из определенной
директории по HTTP протоколу.

func FileServer(root FileSystem) Handler  //  FileSystem - interface

Возвращает обработчик, которые обслуживает HTTP запросы с содержимым
файловой системы, внедренной в root (?)
В особых случаях перенаправляет любой запрос, заканчивающийся
на "/index.html" на тот же путь, без окончания "index.html"

http.FileServer - используется для доступа к статическим файлам из определенной
директории по HTTP протоколу.

После запуска веб-приложения, обработчик http.FileServer, возможно, не будет
читать файлы напрямую с жеского диска. ОС Win и Unix кэшируют недавно
исползованные файлы в RAM, поэтому http.FileServer будет доставать их из RAM,
а не выполнять медленную обработку файла с ЖД

Чтобы использовать реализацию файловой системы ОС нужно использовать http.Dir.
type Dir string // ? implements FileSystem interface?

Dir реализует файловую систему, используя собственную файловую систему,
ограниченную определенным деревом каталогов.

type FileSystem interface {
	Open(name string) (File, error)
}

Для удаления части URL используется http.StripPrefix()
func StripPrefix(prefix string, h Handler) Handler
Возвращает обработчик, который обслуживает http-запросы, удаляя
указанный префикс из пути URL-адреса запроса (и RawPath, если задан) и
вызывая обработчик h

-----------------------------------------------
Пример:
1.Создаем 2 файла index.html и about.html и кладем все к папку static
2.В корневой папке, в файле main.go запускаем:
	http.ListenAndServe(":8181", http.FileServer(http.Dir("static")))
	(Note: оба варианта "./static" и "static" работают)
3.Запускаем приложение
3.В браузере переходим по адресу http://localhost:8181/
4.Браузер выдает там содержимое файла index.html из папки static
5.Путь к корню веб-сайта автоматически сопоставляется с файлом index.html - это все равно,  если бы мы обратились по адресу http://localhost:8181/index.html

6.Данный подход очень ограничен, т.е. сервер отдает нам только статич.файлы.
  Выход: в main():
    fs := http.FileServer(http.Dir("./static"))	
  http.Handle("/", fs)
  http.HandleFunc("/about", func(w http.ResponseWriter, r *http.Request) {
    fmt.Fprint(w, "About Page")
  })
  http.HandleFunc("/contact", func(w http.ResponseWriter, r *http.Request) {
    fmt.Fprint(w, "Contact Page")
  })

  fmt.Println("Server is listening...")
  http.ListenAndServe(":8181", nil)
  
  Теперь если в вводим:
  http://localhost:8181 - (c "/" в конце или без) - переходим в файл index.html
  http://localhost:8181/about - в браузере выводится сообщение "About Page"
  http://localhost:8181/about.html - в браузере выводится файл about.html
  http://localhost:8181/contact - в браузере выводится сообщение "Contact Page"
  
  Таким образом, будет работать как динамическая генерация контента, так и статические файлы
  
  -----------------------------------------------
  Также для отправки файлов можно использовать функцию http.ServeFile()
  Она отправляет единичный файл по определенному пути:
  в main():
  
    http.HandleFunc("/about", func(w http.ResponseWriter, r *http.Request) {
    http.ServeFile(w, r, "static/about.html")
  })
  http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
    http.ServeFile(w, r, "static/index.html")
  })
  fmt.Println("Server is listening...")
  http.ListenAndServe(":8181", nil)
  
